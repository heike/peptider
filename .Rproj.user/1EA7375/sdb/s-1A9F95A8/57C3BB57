{
    "contents" : "\n#' k-nucleotide library of scheme NNN\n#'\n#' @param k length of peptide sequences\n#' @return list consisting of a data frame of peptide classes, size of class, and its probabilities, \n#' and a list of additional information relating to the library scheme\n#' @export\n#' @examples\n#' NNN(2)\nNNN <- function(k) {\n\n  libBuild(k, libscheme=nnn_scheme)\n}\n\n#' k-nucleotide library of scheme NNNC\n#'\n#' @param k length of peptide sequences\n#' @return list consisting of a data frame of peptide classes, size of class, and its probabilities, \n#' and a list of additional information relating to the library scheme\n#' @export\n#' @examples\n#' NNNC(2)\nNNNC <- function(k) {\n    \n    libBuild(k, libscheme=nnnc_scheme)\n}\n\n#' Nucleotide library  scheme NNN\n#'\n#' @name nnn_scheme\n#' @title Nucleotide library scheme NNN\n#' @description This data set contains descriptions of amino acid classes under the NNN library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=nnn_scheme)\n\nnnn_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"D\", \"E\", \"Z\"), \n                            aacids=c(\"SLR\", \"AGPTV\", \"I\", \"DEFHKNQY\", \"MW\", \"C*\"), \n                            c=c(6,4,3,2,1,2.5))\n\n#' Nucleotide library scheme NNNC\n#'\n#' @name nnnc_scheme\n#' @title Nucleotide library scheme NNNC\n#' @description This data set contains descriptions of amino acid classes under the NNN library scheme with C.\n#' @docType data\n#' @usage libBuild(1, libscheme=nnnc_scheme)\n\nnnnc_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"D\", \"E\", \"Z\"), \n                         aacids=c(\"SLR\", \"AGPTV\", \"I\", \"DEFHKNQYC\", \"MW\", \"*\"), \n                         c=c(6,4,3,2,1,3))\n\n\n#' k-nucleotide library of scheme Trimer\n#'\n#' @param k length of peptide sequences\n#' @return list consisting of a data frame of peptide classes, size of class, and its probabilities, \n#' and a list of additional information relating to the library scheme\n#' @export\n#' @examples\n#' Trimer(2)\nTrimer <- function(k) {\n\n  libBuild(k, libscheme=trimer_scheme)\n}\n\n#' k-nucleotide library of scheme Trimer with Cysteine\n#'\n#' @param k length of peptide sequences\n#' @return list consisting of a data frame of peptide classes, size of class, and its probabilities, \n#' and a list of additional information relating to the library scheme\n#' @export\n#' @examples\n#' TrimerC(2)\nTrimerC <- function(k) {\n    \n    libBuild(k, libscheme=trimerc_scheme)\n}\n\n#' Nucleotide library  scheme Trimer\n#'\n#' Only valid peptide sequences are created. Each sequence appears with the same probability.\n#' @name trimer_scheme\n#' @title Nucleotide library scheme Trimer\n#' @description This data set contains descriptions of amino acid classes under the Trimer library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=\"trimer_scheme\")\n\ntrimer_scheme <- data.frame(class=c(\"A\", \"Z\"), \n                            aacids=c(\"SLRAGPTVIDEFHKNQYMW\", \"*\"), \n                            c=c(1, 0))\n\n#' Nucleotide library  scheme Trimer with Cysteine\n#'\n#' Only valid peptide sequences are created. Each sequence appears with the same probability.\n#' @name trimerc_scheme\n#' @title Nucleotide library scheme TrimerC\n#' @description This data set contains descriptions of amino acid classes under the TrimerC library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=\"trimerc_scheme\")\n\ntrimerc_scheme <- data.frame(class=c(\"A\", \"Z\"), \n                            aacids=c(\"SLRAGPTVIDEFHKNQYMWC\", \"*\"), \n                            c=c(1, 0))\n\n\n\n\n#' Diversity index according to Makowski\n#'\n#' Diversity according to Makowski is defined as ... need a reference to Makowski & Soares 2003 here. \n#' @param k length of peptide sequences\n#' @param libscheme function \n#' @return diversity index between 0 and 1\n#' @export\n#' @examples\n#' makowski(2, NNN)\n#' makowski(3, NNK)\n#' makowski(3, Trimer)\nmakowski <- function(k, libscheme) {\n  dframe <- libscheme(k)$data\n  info <- libscheme(1)$info$scheme\n  numAA <- sum(info$s[-nrow(info)]) \n  with(dframe, 1/(numAA^k*sum(probs^2/di)))\n}\n\n#' Coverage as expected number of peptides given all possible peptides\n#'\n#' Coverage of library of size N given random sampling from the pool of all possible peptides according \n#' to probabilities determined according to the library scheme.\n#' @param k length of peptide sequences\n#' @param libscheme function \n#' @param N size of the library \n#' @param lib library, if null, libscheme will be used to create it\n#' @return coverage index between 0 and 1\n#' @export\n#' @examples\n#' coverage(2, NNN, 10^3)\n#' coverage(2, NNK, 10^3)\n#' coverage(2, Trimer, 10^3) ## Trimer coverage is not 1 because of random sampling.\ncoverage <- function(k, libscheme, N, lib=NULL) {\n  if (is.null(lib)) lib <- libscheme(k)\n  libdata <- lib$data\n  \n  initialloss <- (1-(lib$info$valid/lib$info$nucleotides)^k)\n  libdata$expected <- libdata$probs*N*(1-initialloss)\n  libdata$z <- with(libdata, di*(1-exp(-expected/di)))\n  \n  s_count <- sum(subset(lib$info$scheme, class != \"Z\")$s)\n  \n  with(libdata, min(sum(z)/s_count^k,1))\n}\n\n#' Relative efficiency of a library\n#'\n#' efficiency according to our paper\n#' @param k length of peptide sequences\n#' @param libscheme function \n#' @param N size of the library \n#' @param lib library, if null, libscheme will be used to create it\n#' @return relative efficiency index between 0 and 1\n#' @export\n#' @examples\n#' efficiency(3, NNN, 10^2)\n#' efficiency(3, NNK, 10^2)\n#' efficiency(3, Trimer, 10^2) ## Trimer efficiency is not 1 because of random sampling.\nefficiency <- function(k, libscheme, N, lib=NULL) {\n  if (is.null(lib)) lib <- libscheme(k)\n  libdata <- lib$data\n  \n  initialloss <- (1-(lib$info$valid/lib$info$nucleotides)^k)\n  libdata$expected <- libdata$probs*N*(1-initialloss)\n  libdata$z <- with(libdata, di*(1-exp(-expected/di)))\n  \n  s_count <- sum(subset(lib$info$scheme, class != \"Z\")$s)\n  \n  with(libdata, min(s_count^k,sum(z))/N)\n}\n\n\n#' k-nucleotide library of scheme NNK\n#'\n#' @param k length of peptide sequences\n#' @return list consisting of a data frame of peptide classes, size of class, and its probabilities, \n#' and a list of additional information relating to the library scheme\n#' @export\n#' @examples\n#' NNK(2)\nNNK <- function(k) {\n\n  libBuild(k, nnk_scheme)\n}\n\n#' k-nucleotide library of scheme NNKC\n#'\n#' @param k length of peptide sequences\n#' @return list consisting of a data frame of peptide classes, size of class, and its probabilities, \n#' and a list of additional information relating to the library scheme\n#' @export\n#' @examples\n#' NNKC(2)\nNNKC <- function(k) {\n    \n    libBuild(k, nnkc_scheme)\n}\n\n#' Nucleotide library  scheme NNK\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of G, or T.\n#' @name nnk_scheme\n#' @title Nucleotide library scheme NNK\n#' @description This data set contains descriptions of amino acid classes under the NNK library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=nnk_scheme)\n\nnnk_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"Z\"),\n                         aacid=c(\"SLR\", \"AGPTV\", \"DEFHIKMNQWY\", \"C*\"),\n                         c=c(3,2,1,1))\n\n#' Nucleotide library  scheme NNKC\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of G, or T.\n#' @name nnkc_scheme\n#' @title Nucleotide library scheme NNKC\n#' @description This data set contains descriptions of amino acid classes under the NNKC library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=nnkc_scheme)\n\nnnkc_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"Z\"),\n                         aacid=c(\"SLR\", \"AGPTV\", \"DEFHIKMNQWYC\", \"*\"),\n                         c=c(3,2,1,1))\n\n#' Nucleotide library  scheme NNS\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, or G.\n#' @name nns_scheme\n#' @title Nucleotide library scheme NNS\n#' @description This data set contains descriptions of amino acid classes under the NNS library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=nns_scheme)\nnns_scheme <- nnk_scheme\n\n#' Nucleotide library  scheme NNSC\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, or G.\n#' @name nnsc_scheme\n#' @title Nucleotide library scheme NNSC\n#' @description This data set contains descriptions of amino acid classes under the NNSC library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=nnsc_scheme)\nnnsc_scheme <- nnkc_scheme\n\n#' k nucleotide library of scheme NNS\n#'\n#' @param k length of peptide sequences\n#' @return data frame of peptide classes, size of class, and its probability\n#' @export\n#' @examples\n#' NNS(2)\nNNS <- function(k) {\n  ## from a codon to amino acid encoding point of view NNK and NNS are identical.\n  NNK(k)\n}\n\n#' k nucleotide library of scheme NNSC\n#'\n#' @param k length of peptide sequences\n#' @return data frame of peptide classes, size of class, and its probability\n#' @export\n#' @examples\n#' NNSC(2)\nNNSC <- function(k) {\n    ## from a codon to amino acid encoding point of view NNKC and NNSC are identical.\n    NNKC(k)\n}\n\n#' k nucleotide library of scheme NNB\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, G, or T.\n#' @param k length of peptide sequences\n#' @return data frame of peptide classes, size of class, and its probability\n#' @export\n#' @examples\n#' NNB(2)\nNNB <- function(k) {\n\n  libBuild(k, libscheme=nnb_scheme)\n}\n\n#' k nucleotide library of scheme NNBC\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, G, or T.\n#' @param k length of peptide sequences\n#' @return data frame of peptide classes, size of class, and its probability\n#' @export\n#' @examples\n#' NNBC(2)\nNNBC <- function(k) {\n    \n    libBuild(k, libscheme=nnbc_scheme)\n}\n\n#' Nucleotide library  scheme NNB\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, G, or T.\n#' @name nnb_scheme\n#' @title Nucleotide library scheme NNB\n#' @description This data set contains descriptions of amino acid classes under the NNB library scheme.\n#' @docType data\n#' @usage libBuild(1, libscheme=\"nnb_scheme\")\n\nnnb_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"D\", \"E\", \"Z\"),\n              aacid=c(\"S\", \"LR\", \"AGPTV\", \"DFHINY\", \"EKMQW\", \"*C\"),\n              c=c(5,4,3,2,1, 1.5))\n\n#' Nucleotide library  scheme NNBC\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, G, or T.\n#' @name nnbc_scheme\n#' @title Nucleotide library scheme NNBC\n#' @description This data set contains descriptions of amino acid classes under the NNBC library scheme with C.\n#' @docType data\n#' @usage libBuild(1, libscheme=\"nnbc_scheme\")\n\nnnbc_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"D\", \"E\", \"Z\"),\n                         aacid=c(\"S\", \"LR\", \"AGPTV\", \"DFHINYC\", \"EKMQW\", \"*\"),\n                         c=c(5,4,3,2,1,1))\n\n#' Build peptide library of k-length sequences according to specified scheme\n#' \n#' some more explanation here\n#' @param k length of peptide sequences\n#' @param libscheme library scheme specifying classes of amino acids according to number of encodings\n#' last class is reserved for stop tags and other amino acids we are not interested in. \n#' @return library and library scheme used\n#' @examples\n#' user_scheme <- data.frame(class=c(\"A\", \"B\", \"C\", \"Z\"),\n#'                           aacid=c(\"SLR\", \"AGPTV\", \"CDEFHIKMNQWY\", \"*\"),\n#'                           c=c(3,2,1,1))\n#' user_library <- libBuild(3, user_scheme)                        \n#' @export\n \nlibBuild <- function(k, libscheme) {\n  libscheme$class <- as.character(libscheme$class)\n  libscheme$s <- nchar(as.character(libscheme$aacid))\n  seq <- with(libscheme[-nrow(libscheme),], make.RV(class, s*c))\n  d <- with(libscheme[-nrow(libscheme),], make.RV(class, s))\n  \n  d7 <- multN(d,k)\n  seq7 <- multN(seq,k)\n  di <- with(libscheme, round(probs(d7)*sum(s[-length(unique(class))])^k,0))\n  pi <- probs(seq7)\n  mult <- with(libscheme, s*c)\n  list(data=data.frame(class = as.vector(d7), di = di, probs = pi),\n       info=list(nucleotides=sum(with(libscheme, mult)), \n                 valid=with(libscheme, sum(mult[-length(mult)])),\n                 scheme=libscheme))\n}\n\n\n#' Detection probability in a single library of size N\n#'\n#' The last DNA nucleus in the sequence is restricted to be one of C, G, or T.\n#' @param lib library used in experiment, defaults to NNK(7)\n#' @param size size of the library, defaults to 10^8\n#' @return vector of detection probabilities for peptide sequences in each class\n#' @export\n#' @examples\n#' summary(detect())\n#'\n#' require(ggplot2)\n#' lib = NNK(7)\n#' qplot(detect(lib, size=10^8), weight=di, geom=\"histogram\", data=lib$data)\ndetect <- function(lib = NNK(7), size = 10^8) {\n  with(lib$data, 1 - exp(-size*probs/di))\n}\n\n\ngetNeighborOne <- function(x, blosum=1) {\n  ## For CRAN check\n  BLOSUM80 <- AA1 <- Blosum <- AA2 <- NULL\n    \n  data(BLOSUM80, envir=environment())\n  \n  replacements <- llply(strsplit(x,\"\"), function(y) {\n    llply(y, function(z) {\n      as.character(subset(BLOSUM80, (AA1 == z) & (Blosum >= blosum)& (AA2 != z))$AA2 )\n    })\n  })[[1]]\n  neighbors <- NULL\n    for (i in 1:nchar(x)) {\n      neighbors <- c(neighbors, paste(substr(x, 1,i-1), replacements[[i]], substr(x, i+1, nchar(x)), sep=\"\"))\n    }\n  # check that all neighbors have the correct length\n  idx <- which(nchar(neighbors) != nchar(x))\n  if (length(idx)>0) neighbors <- neighbors[-idx]\n  neighbors <- unique(c(x, neighbors))\n  \n  return(neighbors)\n}\n\n#' Find all neighbors of degree one for a set of peptide sequences\n#' \n#' first degree neighbors - a neighbor of a peptide is defined as a peptide sequence that differs in at most one amino acid from a given sequence. \n#' Additionally, we can restrict neighbors to regard only those sequences that have a certain minimal BLOSUM loading. \n#' @param x (vector) of character strings of  peptide sequences.\n#' @param blosum minimal BLOSUM loading, defaults to 1 for positive loadings only\n#' @return list of neighbor sequences\n#' @export\n#' @examples\n#' getNeighbors(\"APE\")\n#' getNeighbors(c(\"HI\", \"APE\"))\n#' getNeighbors(c(\"HI\", \"EARNEST\", \"APE\"), blosum=3)\n#' ## degree 2 neighbors:\n#' unique(unlist(getNeighbors(getNeighbors(\"APE\"))))\ngetNeighbors <- function(x, blosum=1) {\n  if (length(x) == 1) return(getNeighborOne(x, blosum))\n  llply(x, getNeighborOne)\n}\n\ngetNofNeighborsOne <- function(x, blosum = 1, method=\"peptide\", libscheme=NULL) {\n  ## For CRAN check\n  BLOSUM80 <- AA1 <- Blosum <- AA2 <- NULL\n    \n  data(BLOSUM80, envir=environment())\n  replacements <- llply(strsplit(x,\"\"), function(y) {\n    llply(y, function(z) {\n      as.character(subset(BLOSUM80, (AA1 == z) & (Blosum >= blosum) & (AA2 != z))$AA2)\n    })\n  })[[1]]\n  if (method == \"peptide\") return(length(unlist(replacements))+1)\n  \n  stopifnot(!is.null(libscheme))\n  lib <- libscheme(1)$info$scheme\n   \n  dnas <- sum(unlist(llply(unlist(replacements), function(w) { \n    lib[grep(w, lib$aacid),\"c\"]\n  })))\n  dnas <- dnas + sum(unlist(llply(unlist(strsplit(x, split=\"\")), function(w) { \n    lib[grep(w, lib$aacid),\"c\"]\n  })))\n  return(dnas)\n}\n\n#' Compute the number of neighbor of degree one for a set of peptide sequences\n#' \n#' first degree neighbors - a neighbor of a peptide is defined as a peptide sequence that differs in at most one amino acid from a given sequence. \n#' Additionally, we can restrict neighbors to regard only those sequences that have a certain minimal BLOSUM loading. \n#' Use this function for only a few peptide sequences. Any larger number of peptide sequences will take too much main memory.\n#' @param x (vector) of character strings of  peptide sequences.\n#' @param blosum minimal BLOSUM loading, defaults to 1 for positive loadings only\n#' @param method character string, one of \"peptide\" or \"dna\". This specifies the level at which the neighbors are calculated.\n#' @param libscheme library scheme under which neighbors are being calculated. this is only of importance, if method=\"dna\"\n#' @return vector of numbers of neighbors \n#' @export\n#' @examples\n#' getNofNeighbors(\"APE\")\n#' getNofNeighbors(c(\"NEAREST\", \"EARNEST\"))\n#' getNofNeighbors(\"N\")\n#' getNofNeighbors(\"N\", method=\"dna\", libscheme=NNK)\ngetNofNeighbors <- function(x, blosum = 1, method=\"peptide\", libscheme=NULL) {\n  data(BLOSUM80, envir=environment())\n  if (length(x) == 1) return(getNofNeighborsOne(x, blosum, method, libscheme))\n\n  return(llply(x, getNofNeighborsOne, blosum, method, libscheme))\n}\n\n\n\n\n#' Compute the number of codons for a vector of peptide sequences\n#' \n#' use this function for only a few peptide sequences. Any larger number of peptide sequences should be dealt with in the framework of the library scheme and the detect function.\n#' @param x (vector) of character strings of  peptide sequences.\n#' @param libscheme library scheme under which neighbors are being calculated. this is only of importance, if method=\"dna\"\n#' @return vector of numbers of codons \n#' @export\n#' @examples\n#' codons(\"APE\", libscheme=NNK)\n#' codons(\"HENNING\", libscheme=NNK)\ncodons <- function(x, libscheme=NULL) {\n  if (length(x) == 1) return(codonsOne(x, libscheme))\n\n  unlist(llply(x, codonsOne, libscheme=libscheme))\n}\n\ncodonsOne <- function(x, libscheme) {\n  stopifnot(!is.null(libscheme))\n  lib <- libscheme(1)$info$scheme\n\n  prod(unlist(llply(strsplit(x, split=\"\")[[1]], function(w) { \n    lib[grep(w, lib$aacid),\"c\"]\n  })))\n}\n\n#' Probability of detection of a peptide sequence \n#' \n#' use this function for only a few peptide sequences. Any larger number of peptide sequences should be dealt with in the framework of the library scheme and the detect function.\n#' @param x (vector) of character strings of  peptide sequences.\n#' @param libscheme library scheme under which neighbors are being calculated. \n#' @param N number of valid DNA clones investigated\n#' @return probability of detection\n#' @export\n#' @examples\n#' ppeptide(\"APE\", libscheme=NNK, N=10^8)\n#' ppeptide(\"HENNING\", libscheme=NNK, N=10^8)\n\nppeptide <- function(x, libscheme, N) {\n  n <- sum(codons(x, libscheme=libscheme))\n  Max <- libscheme(1)$info$valid^nchar(as.character(x[1]))\n  1 - exp(-N*n/Max)\n}\n\n\n#' BLOSUM80 matrix\n#' \n#' where does this matrix come from and what does it describe?\n#' @name BLOSUM80\n#' @title BLOSUM80 matrix\n#' @description where does this matrix come from and what does it describe?\n#' @docType data\n#' @usage data(BLOSUM80)\nNULL",
    "created" : 1381323510203.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3943246072",
    "id" : "57C3BB57",
    "lastKnownWriteTime" : 1382794136,
    "path" : "~/peptider/R/peptider.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}